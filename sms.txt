@model Assets.Web.Models.DashboardViewModel

@{
    ViewBag.Title = "Trang chủ";
}

@section styles{
    <link href="~/adminlte/css/jquery-datatables.min.css" rel="stylesheet" />
    <link href="~/adminlte/css/jquery-confirm.css" rel="stylesheet" />
    <link href="~/adminlte/css/sb-admin-2.min.css" rel="stylesheet" />
    <link href="~/adminlte/css/customize.css" rel="stylesheet" />

    <style>
        label {
            font-weight: 500 !important;
            font-size: 0.9rem;
        }
    </style>
}

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-3 col-6" id="open-free-lap" style="cursor:pointer">
                <div class="small-box bg-info">
                    <div class="inner">
                        <h3>@ViewBag.CountFree</h3>
                        <p>Số máy sẵn sàng</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-laptop"></i>
                    </div>
                    <a href="#" class="small-box-footer">Chi tiết <i class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6" id="open-active-lap" style="cursor:pointer">
                <!-- small box -->
                <div class="small-box bg-success">
                    <div class="inner">
                        <h3>@ViewBag.CountActive</h3>
                        <p>Số máy đang được mượn</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-stats-bars"></i>
                    </div>
                    <a href="#" class="small-box-footer">Chi tiết <i class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6" id="open-overdue-lap" style="cursor:pointer">
                <!-- small box -->
                <div class="small-box bg-warning">
                    <div class="inner">
                        <h3>0</h3>
                        <p>Số máy quá hạn trả</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-android-warning"></i>
                    </div>
                    <a href="#" class="small-box-footer">Chi tiết <i class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
            <div class="col-lg-3 col-6" id="open-break-lap" style="cursor:pointer">
                <!-- small box -->
                <div class="small-box bg-danger">
                    <div class="inner">
                        <h3>@ViewBag.CountBreak</h3>
                        <p>Số máy cần sửa chữa</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-ios-cog"></i>
                    </div>
                    <a href="#" class="small-box-footer">Chi tiết <i class="fas fa-arrow-circle-right"></i></a>
                </div>
            </div>
        </div>

        <!--Danh sách máy FREE-->
        <div class="row collapse" id="tbl-free-lap">
            <!-- Main content -->
            <section class="content" style="width: 100%">
                <div class="container-fluid">
                    <div class="card">
                        <!-- /.card-header -->
                        <div class="card-body">
                            <div class="row" style="padding-bottom: 10px">
                                <div class="col-10">
                                    <button id="btn-add" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#registerModal">
                                        <i class="fas fa-edit"></i> Đăng ký
                                    </button>
                                </div>
                            </div>
                            <div style="overflow: auto; border: 1px solid #dee2e6; max-height: 550px">
                                <table id="equip-table" class="sortable table table-bordered table-hover" style="width:100% !important; text-align: center">
                                    <thead style="background:#17a2b8; color:white; text-align:center">
                                        <tr>
                                            <th>ID</th>
                                            <th>Tên máy</th>
                                            <th>Số seri</th>
                                            <th>Pin</th>
                                            <th>Chuột</th>
                                            <th>Sạc</th>
                                        </tr>
                                    </thead>
                                    @foreach (var item in ViewBag.Free)
                                    {
                                        <tr>
                                            <td>@item.ID</td>
                                            <td>@item.Name</td>
                                            <td>@item.Serial</td>
                                            <td>
                                                @if (@item.Battery == true)
                                                {
                                                    <i class="fas fa-check-square" style="color: dodgerblue"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (@item.Mouse == true)
                                                {
                                                    <i class="fas fa-check-square" style="color: dodgerblue"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (@item.Charger == true)
                                                {
                                                    <i class="fas fa-check-square" style="color: dodgerblue"></i>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        <!--Danh sách máy ĐANG ACTIVE-->
        <div class="row collapse" id="tbl-active-lap">
            <!-- Main content -->
            <section class="content" style="width: 100%">
                <div class="container-fluid">
                    <div class="card">
                        <!-- /.card-header -->
                        <div class="card-body">
                            <div style="overflow: auto; border: 1px solid #dee2e6; max-height: 550px">
                                <table id="equip-table" class="sortable table table-bordered table-hover" style="width:100% !important; text-align: center">
                                    <thead style="background:#28a745; color:white; text-align:center">
                                        <tr>
                                            <th>ID</th>
                                            <th>Tên máy</th>
                                            <th>Số seri</th>
                                            <th>Pin</th>
                                            <th>Chuột</th>
                                            <th>Sạc</th>
                                        </tr>
                                    </thead>
                                    @foreach (var item in ViewBag.Active)
                                    {
                                        <tr>
                                            <td>@item.ID</td>
                                            <td>@item.Name</td>
                                            <td>@item.Serial</td>
                                            <td>
                                                @if (@item.Battery == true)
                                                {
                                                    <i class="fas fa-check-square" style="color: dodgerblue"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (@item.Mouse == true)
                                                {
                                                    <i class="fas fa-check-square" style="color: dodgerblue"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (@item.Charger == true)
                                                {
                                                    <i class="fas fa-check-square" style="color: dodgerblue"></i>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        <!--Danh sách máy BREAK-->
        <div class="row collapse" id="tbl-break-lap">
            <!-- Main content -->
            <section class="content" style="width: 100%">
                <div class="container-fluid">
                    <div class="card">
                        <!-- /.card-header -->
                        <div class="card-body">
                            <div style="overflow: auto; border: 1px solid #dee2e6; max-height: 550px">
                                <table id="equip-table" class="sortable table table-bordered table-hover" style="width:100% !important; text-align: center">
                                    <thead style="background:#dc3545; color:white; text-align:center">
                                        <tr>
                                            <th>ID</th>
                                            <th>Tên máy</th>
                                            <th>Số seri</th>
                                            <th>Pin</th>
                                            <th>Chuột</th>
                                            <th>Sạc</th>
                                        </tr>
                                    </thead>
                                    @foreach (var item in ViewBag.Break)
                                    {
                                        <tr>
                                            <td>@item.ID</td>
                                            <td>@item.Name</td>
                                            <td>@item.Serial</td>
                                            <td>
                                                @if (@item.Battery == true)
                                                {
                                                    <i class="fas fa-check-square" style="color: dodgerblue"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (@item.Mouse == true)
                                                {
                                                    <i class="fas fa-check-square" style="color: dodgerblue"></i>
                                                }
                                            </td>
                                            <td>
                                                @if (@item.Charger == true)
                                                {
                                                    <i class="fas fa-check-square" style="color: dodgerblue"></i>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="registerModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" style="color:dodgerblue">Đăng ký thiết bị</h4>
                    <button type="button" class="close" data-dismiss="modal" style="color:red">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="col-md-12 row-form">
                        <div class="column form-horizontal form-left col-md-7">
                            <div class="form-group row-1 input-group">
                                <label class="control-label col-2 lb">Mã CNV <span class="red">(*)</span></label>
                                <div class="col-md-4 input-group input-group-sm">
                                    <input class="form-control input-previous-button col-md-12" id="txtEmpCode" maxlength="8" autocomplete="off" />
                                </div>
                            </div>
                            <div class="form-group input-group">
                                <label class="control-label col-md-2 top-space">Lý do <span class="red">(*)</span></label>
                                <div class="col-md-10 input-group-sm">
                                    <textarea class="form-control col-md-12" style="resize: none" id="reason"></textarea>
                                </div>
                            </div>
                        </div>

                        <div class="column col-md-1 col-mid"></div>

                        <!--Cột bên phải dành cho thông tin nhân viên-->
                        <div class="column form-horizontal form-right col-md-4">
                            <!--Ảnh profile-->
                            <div class="form-group col-12 profile-img">
                                <div class="img-profile" id="emp_img">
                                    <img id="img-profile" src="~/adminlte/img/the-world.jpg" />
                                </div>
                            </div>
                            <!--Thông tin profile-->
                            <div class="form-group input-group input-group-sm">
                                <label class="col-3 top-space" for="FullName">Họ và tên</label>
                                <input readonly class="form-control col-9 input-previous-button" id="txtFullName" />
                            </div>
                            <div class="form-group input-group input-group-sm">
                                <label class="col-3 top-space" for="Positon">Vị trí</label>
                                <input readonly class="form-control col-9 input-previous-button" id="txtPosition" />
                            </div>
                            <div class="form-group input-group input-group-sm">
                                <label class="col-3 top-space" for="Positon">Phòng ban</label>
                                <input readonly class="form-control col-9 input-previous-button" id="txtTeam" />
                            </div>
                        </div>
                    </div>
                    <div class="note col-12">
                        <label class="control-label" style="color: dodgerblue"><u>Lưu ý</u>: <span style="color: #858796">&nbsp;Các trường <span style="color:red">(*)</span> bắt buộc phải nhập đầy đủ.</span></label>
                    </div>
                    <!--Đăng ký danh sách thiết bị-->
                    <div class="bottom">
                        <div class="form-horizontal col-12 row-add" style="width: 100%">
                            <div class="items-container">
                                <table class="table-bordered table table-hover table-sm" id="lap-items" style="font-family:Source Sans Pro">
                                    <thead style="text-align:center; font-size:0.9rem">
                                        <tr class="table-header-items">
                                            <th></th>
                                            <th>Máy tính <span class="red">(*)</span></th>
                                            <th>Chuột</th>
                                            <th>Sạc</th>
                                            <th>Pin</th>
                                            <th colspan="2">Thời gian trả máy <span class="red">(*)</span></th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <div style="text-align: center">
                        <label id="add-row-items" class="btn-primary btn top-space btn-sm" title="Thêm hàng hóa khác" style="cursor: pointer; margin-top:8px;">
                            <i class="fas fa-plus"></i>&nbsp; Thêm máy
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-sm btn-primary">Đăng ký</button>
                    <button type="button" class="btn btn-sm btn-danger" data-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
    <!-- /.container-fluid -->
</section>

@section scripts {
    <script src="~/adminlte/js/sortable.js"></script>
    <script src="~/adminlte/js/jquery-ui.js"></script>
    <script src="~/adminlte/js/jquery.min.js"></script>
    <script src="~/adminlte/js/jquery-confirm.js"></script>
    <script src="~/adminlte/plugins/datatables/jquery.dataTables.min.js"></script>

    <script>
        //user
        var _user = {
            init: function () {
                _user.registerEvent();
            },
            registerEvent: function () {
                _user.getUser();
            },
            getUser: function () {
                var empCode = $("#txtEmpCode").val();
                $.ajax({
                    url: '/User/GetUserByCode?empCode=' + empCode,
                    type: "GET",
                    dataType: 'json',
                    success: function (reponse) {
                        console.log(reponse.data);
                        if (reponse.status) {
                            $('#txtFullName').val(reponse.data.FullName);
                            $('#txtPosition').val(reponse.data.Position);
                            $('#txtTeam').val(reponse.data.Team);
                            $("#img-profile").attr("src", `/adminlte/pictures/${empCode}.jpg`);
                        } else {
                            alert("Mã nhân viên không tồn tại");
                        }
                    },
                    error: function () {
                    }
                });
            }
        }
        _user.init();

        //Nhận sự kiện getUser khi gõ 7, 8 số
        $('#txtEmpCode').keyup(function () {
            var count = $('#txtEmpCode').val().length;
            if (count == 7 || count == 8) {
                _user.getUser();
            } else {
                $('#txtFullName').val("");
                $('#txtPosition').val("");
                $('#txtTeam').val("");
            }
        });
    </script>

    <script>
        $("#add-row-items").off('click').on('click', function (e) {
            var html = `<tr class="row-items">
                                <td>
                                    <label class="control-label btn btn-sm delete-items"><i class="fas fa-times-circle"></i></label>
                                </td>
                                <td class="input-group-sm">
                                    <select class="form-control input-previous-button assetType">
                                        <option value="0" selected>Hàng thường</option>
                                        <option value="1">Hàng IT</option>
                                        <option value="2">Hàng độc hại</option>
                                    </select>
                                </td>
                                <td class="input-group-sm">
                                    <input class="form-control input-previous-button serial" />
                                </td>
                                <td class="input-group-sm">
                                    <input type="number" class="form-control input-previous-button quantity"/>
                                </td>
                                <td class="input-group-sm">
                                    <input class="form-control input-previous-button unit" />
                                </td>
                                <td class="input-group-sm">
                                    <input class="form-control datepicker returnDate" placeholder="Ngày" style="background: white" readonly autocomplete="off"/>
                                </td>
                                <td class="input-group-sm">
                                    <input class="form-control timepicker returnTime" placeholder="Giờ" type="time"/>
                                </td>
                            </tr>`;
            $('#lap-items > tbody:last-child').append(html);
            $('.datepicker').datepicker({
                dateFormat: 'dd/mm/yy'
            });
            $("#lap-items").on("click", ".delete-items", function () {
                $(this).closest(".row-items").remove();
            });
        });
        $("#lap-items").on("click", ".delete-items", function () {
            $(this).closest(".row-items").remove();
        });
        $('.datepicker').datepicker({
            dateFormat: 'dd/mm/yy'
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                plugins: ['dayGrid', 'bootstrap'],
                themeSystem: 'bootstrap'
            });
            calendar.render();
        });

        $('#open-free-lap').on("click", (event) => {
            $("#tbl-free-lap").removeClass('collapse');
            $("#tbl-active-lap").addClass('collapse');
            $("#tbl-break-lap").addClass('collapse');
            $("#tbl-overdue-lap").addClass('collapse');
        });

        $('#open-active-lap').on("click", (event) => {
            $("#tbl-active-lap").removeClass('collapse');
            $("#tbl-free-lap").addClass('collapse');
            $("#tbl-break-lap").addClass('collapse');
            $("#tbl-overdue-lap").addClass('collapse');
        });

        $('#open-break-lap').on("click", (event) => {
            $("#tbl-break-lap").removeClass('collapse');
            $("#tbl-active-lap").addClass('collapse');
            $("#tbl-free-lap").addClass('collapse');
            $("#tbl-overdue-lap").addClass('collapse');
        });
    </script>
}

-----------------------------------------------------------------------

using Newtonsoft.Json;
using SMS.Models.EF;
using SMS.Web.Common;
using SMS.Web.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;

namespace SMS.Web.Controllers
{
    public class GuestController : BaseController
    {
        private SMSDbContext dbContext;

        public GuestController()
        {
            dbContext = new SMSDbContext();
        }
        public ActionResult History()
        {
            return View();
        }

        /// <summary>
        /// Lịch sử khách vào ra
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="company"></param>
        /// <param name="team"></param>
        /// <param name="employee"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult FetchGuestDataHistory(string from = null, string to = null, string company = "", string team = "", string employee = "")
        {
            try
            {
                ViewBag.from = from;
                ViewBag.to = to;
                ViewBag.employee = employee;
                ViewBag.team = team;
                ViewBag.company = company;

                if (from == null || to == null)
                {
                    from = DateTime.Now.ToString("dd/MM/yyyy");
                    to = DateTime.Now.ToString("dd/MM/yyyy");
                }

                var user = (UserLogin)Session[CommonConstants.USER_SESSION];
                var items = dbContext.Guest_Item.ToList();
                var tName = dbContext.Users.Include(t => t.Team).First(u => u.ID == user.ID).Team.Name;
                var currentRole = (HttpContext.User as CustomPrincipal).PriorityRole;
                var isGuard = (HttpContext.User as CustomPrincipal).RoleName == "Guard";

                var model = dbContext.Guests.Where(g => currentRole >= 4 || isGuard || g.Team == tName).OrderByDescending(x => x.EstimatedDateIn).ToList();

                var result = Json(new { data = model, items, currentRole, isGuard, recordsTotal = model.Count(), recordsFiltered = model.Count() });
                result.MaxJsonLength = int.MaxValue;
                return result;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Load danh sách phê duyệt hàng cho SMT, FST
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult FetchGuestData(string type)
        {
            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            var tName = dbContext.Users.Include(t => t.Team).First(u => u.ID == user.ID).Team.Name;

            var currentRole = (HttpContext.User as CustomPrincipal).PriorityRole;

            var model = new List<Guest>();

            if (type == "SMT")
            {
                model = dbContext.Guests
                    .Where(g => dbContext.Guest_Item.Any(i => i.CatID == g.ID && i.AssetType == 1 && i.ITT_Status == null))
                    .OrderByDescending(x => x.CreatedDate).ToList();
            }
            else if (type == "FST")
            {
                model = dbContext.Guests
                   .Where(g => dbContext.Guest_Item.Any(i => i.CatID == g.ID && i.AssetType == 2 && i.FST_Status == null))
                   .OrderByDescending(x => x.CreatedDate).ToList();
            }

            if (type == "SMT" && currentRole < 4 && (tName != "SMT" || tName != "ITT"))
            {
                model.Clear();
            }

            if (type == "FST" && currentRole < 4 && tName != "FST")
            {
                model.Clear();
            }

            return Json(new { data = model, currentRole, recordsTotal = model.Count(), recordsFiltered = model.Count() });
        }

        /// <summary>
        /// Load view tạo mới
        /// </summary>
        /// <returns></returns>
        /// 
        [AuthorizeUser(AccessLevel = 1)]
        public ActionResult Create()
        {
            return View();
        }

        /// <summary>
        /// Load view tạo mới khách ca đêm
        /// </summary>
        /// <returns></returns>
        /// 
        [AuthorizeUser(AccessLevel = 1)]
        public ActionResult CreateNightShift()
        {
            return View();
        }

        /// <summary>
        /// Tạo mới khách ca đêm
        /// </summary>
        /// <param name="m"></param>
        /// <returns></returns>
        /// 
        [AuthorizeUser(AccessLevel = 1)]
        [HttpPost]
        public ActionResult CreateNightShift(Guest m)
        {
            var guest = Request.Form.Get("guest");
            var model = JsonConvert.DeserializeObject<List<Guest>>(guest);

            //// Lưu khách nhiều ngày với định dạng dd/MM/yyyy
            //var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            //foreach (var item in model)
            //{
            //    item.CreatedBy = user.EmpCode + "|" + user.FullName;
            //    //file
            //    if (Request.Files.Count > 0)
            //    {
            //        var file = Request.Files.Get("file");
            //        var fileName = Path.GetFileName(file.FileName);
            //        item.FileRedirectURL = fileName;

            //        if (!Directory.Exists(Server.MapPath("~/Files")))
            //        {
            //            Directory.CreateDirectory(Server.MapPath("~/Files"));
            //        }
            //        var filePath = Server.MapPath("~/Files/" + fileName);
            //        file.SaveAs(filePath);
            //    }
            //}
            dbContext.Guests.AddRange(model);

            dbContext.SaveChanges();

            return Content("Success");
        }

        /// <summary>
        /// Tạo mới
        /// </summary>
        /// <param name="m"></param>
        /// <returns></returns>
        /// 
        [AuthorizeUser(AccessLevel = 1)]
        [HttpPost]
        public ActionResult Create(Guest m)
        {
            var guest = Request.Form.Get("guest");
            var excludeDate = Request.Form.Get("excludeDate");
            var model = JsonConvert.DeserializeObject<Guest>(guest);

            //file
            if (Request.Files.Count > 0)
            {
                var file = Request.Files.Get("file");
                var fileName = Path.GetFileName(file.FileName);
                model.FileRedirectURL = fileName;

                if (!Directory.Exists(Server.MapPath("~/Files")))
                {
                    Directory.CreateDirectory(Server.MapPath("~/Files"));
                }
                var filePath = Server.MapPath("~/Files/" + fileName);
                file.SaveAs(filePath);
            }

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(model);

            var guests = new List<Guest>();

            // Lưu khách nhiều ngày với định dạng dd/MM/yyyy
            saveGuest(model.EstimatedDateIn, model.EstimatedDateOut, excludeDate, json, ref guests);

            dbContext.Guests.AddRange(guests);

            dbContext.SaveChanges();

            return Content("Success");
        }


        private string FormatDate(string date)
        {
            var strs = date.Split('/');
            return strs[1] + "/" + strs[0] + "/" + strs[2];
        }

        /// <summary>
        /// Hàm lưu đăng ký khách (bao gồm cả ngắn hạn cả dài hạn)
        /// </summary>
        /// <param name="StartDate"></param>
        /// <param name="EndDate"></param>
        /// <param name="excludeDate"></param>
        /// <param name="model"></param>
        /// <param name="guests"></param>
        private void saveGuest(string StartDate, string EndDate, string excludeDate, string model, ref List<Guest> guests)
        {
            var startdate = DateTime.ParseExact(StartDate, "dd/MM/yyyy", null);

            var enddate = DateTime.ParseExact(EndDate, "dd/MM/yyyy", null);

            var dateDiff = (enddate - startdate).TotalDays;

            var newGuest = Newtonsoft.Json.JsonConvert.DeserializeObject<Guest>(model);
            var excludeDates = excludeDate.Split(',');

            if (excludeDates.Contains(StartDate))
            {
                if (StartDate == EndDate)
                {
                    return;
                }
                else
                {
                    var newStartDate = startdate.AddDays(1).ToString("dd/MM/yyyy");
                    saveGuest(newStartDate, EndDate, excludeDate, model, ref guests);
                }
            }
            else
            {
                var newStartDate = startdate.AddDays(1).ToString("dd/MM/yyyy");

                if (dateDiff >= 1)
                {
                    newGuest.EstimatedDateIn = StartDate;
                    newGuest.EstimatedDateOut = StartDate;
                    newGuest.CreatedDate = System.DateTime.Now;
                    var user = (UserLogin)Session[CommonConstants.USER_SESSION];
                    newGuest.CreatedBy = user.EmpCode + "|" + user.FullName;
                    newGuest.Status = false;

                    guests.Add(newGuest);

                    saveGuest(newStartDate, EndDate, excludeDate, model, ref guests);
                }
                else
                {
                    newGuest.EstimatedDateIn = StartDate;
                    newGuest.EstimatedDateOut = StartDate;
                    newGuest.CreatedDate = System.DateTime.Now;
                    var user = (UserLogin)Session[CommonConstants.USER_SESSION];
                    newGuest.CreatedBy = user.EmpCode + "|" + user.FullName;
                    newGuest.Status = false;

                    guests.Add(newGuest);
                }
            }

        }

        /// <summary>
        /// Hàm show thông tin chi tiết đăng ký khách
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult Detail(int id)
        {
            var guest = dbContext.Guests.Find(id);
            var guestitems = dbContext.Guest_Item.Where(t => t.CatID == id && t.Quantity != null && t.Item != null).ToList();
            guest.Guest_Item = guestitems;
            return View(guest);
        }

        /// <summary>
        /// Load view Sửa
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [AuthorizeUser(AccessLevel = 1)]
        public ActionResult Edit(int id)
        {
            var guest = dbContext.Guests.Find(id);
            var guest_items = dbContext.Guest_Item.Where(t => t.CatID == id).ToList();
            guest.Guest_Item = guest_items;
            return View(guest);
        }

        /// <summary>
        /// Thực thi Sửa
        /// </summary>
        /// <param name="m"></param>
        /// <returns></returns>
        [AuthorizeUser(AccessLevel = 1)]
        [HttpPost]
        public ActionResult Edit(Guest m)
        {
            try
            {
                var guestJSON = Request.Form.Get("guest");
                var model = JsonConvert.DeserializeObject<Guest>(guestJSON);

                var filePath = "";
                //file
                if (Request.Files.Count > 0)
                {
                    var file = Request.Files.Get("file");
                    var fileName = Path.GetFileName(file.FileName);
                    model.FileRedirectURL = fileName;

                    if (!Directory.Exists(Server.MapPath("~/Files")))
                    {
                        Directory.CreateDirectory(Server.MapPath("~/Files"));
                    }
                    filePath = Server.MapPath("~/Files/" + fileName);
                    file.SaveAs(filePath);

                }

                var user = (UserLogin)Session[CommonConstants.USER_SESSION];

                var guest = dbContext.Guests.FirstOrDefault(t => t.ID == model.ID);
                guest.ModifiedBy = user.EmpCode + "|" + user.FullName;
                guest.ModifiedDate = DateTime.Now;

                guest.Type = model.Type;
                guest.IO = model.IO;
                guest.FullName = model.FullName;
                guest.IDCard = model.IDCard;
                guest.Company = model.Company;
                guest.NumbersOfPerson = model.NumbersOfPerson;
                guest.Visa = model.Visa;
                guest.Hotel = model.Hotel;
                guest.Purpose = model.Purpose;
                guest.TransportNo = model.TransportNo;
                guest.EstimatedDateIn = model.EstimatedDateIn;
                guest.EstimatedTimeIn = model.EstimatedTimeIn;
                guest.EstimatedDateOut = model.EstimatedDateOut;
                guest.EstimatedTimeOut = model.EstimatedTimeOut;
                guest.KVPNo = model.KVPNo;
                guest.Check_Guest = model.Check_Guest;
                if (filePath != "")
                {
                    guest.FileRedirectURL = model.FileRedirectURL;
                }

                var listItemIDs = new List<int>();
                foreach (var item in model.Guest_Item)
                {
                    if (item.ID == 0)
                    {
                        dbContext.Guest_Item.Add(item);
                    }
                    else
                    {
                        listItemIDs.Add(item.ID);
                        var bringItem = dbContext.Guest_Item.FirstOrDefault(t => t.ID == item.ID);

                        bringItem.Item = item.Item;
                        bringItem.Serial = item.Serial;
                        bringItem.Quantity = item.Quantity;
                        bringItem.Unit = item.Unit;
                        bringItem.AssetType = item.AssetType;
                        bringItem.IsReturn = item.IsReturn;
                        bringItem.ReturnDate = item.ReturnDate;
                        bringItem.ReturnTime = item.ReturnTime;
                        bringItem.ModifiedBy = user.EmpCode;
                        bringItem.ModifiedDate = DateTime.Now;
                    }
                }
                var itemsDelete = dbContext.Guest_Item.Where(t => !listItemIDs.Contains(t.ID) && t.CatID == guest.ID);
                dbContext.Guest_Item.RemoveRange(itemsDelete);

                dbContext.SaveChanges();

                return Content("Success");
            }
            catch (System.Exception ex)
            {
                return Content("Lỗi trong quá trình xử lý");
            }
        }

        [AuthorizeUser(AccessLevel = 2)]
        [HttpGet]
        public ActionResult Delete(int id)
        {
            var guest_items = dbContext.Guest_Item.Where(t => t.CatID == id).ToList();
            dbContext.Guest_Item.RemoveRange(guest_items);

            var guest = dbContext.Guests.FirstOrDefault(t => t.ID == id);
            dbContext.Guests.Remove(guest);

            dbContext.SaveChanges();

            return Content("Success");
        }

        [AuthorizeUser(AccessLevel = 3)]
        [HttpGet]
        public ActionResult Cancel(int id)
        {

            var guest = dbContext.Guests.FirstOrDefault(t => t.ID == id);
            guest.Cancel = true;

            dbContext.SaveChanges();

            return Content("Success");
        }

        //Load view ITT phê duyệt đăng ký khách
        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        public ActionResult ITTApproveDetail(int id)
        {
            var guest = dbContext.Guests.Find(id);
            var guest_items = dbContext.Guest_Item.Where(t => t.CatID == id && t.AssetType == 1).OrderByDescending(t => t.CreatedDate).ToList();

            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            var tName = dbContext.Users.Include(t => t.Team).First(u => u.ID == user.ID).Team.Name;

            var isAdmin = (HttpContext.User as CustomPrincipal).PriorityRole >= 4;

            if (!isAdmin && (tName != "SMT" || tName != "ITT"))
            {
                guest_items.Clear();
            }

            guest.Guest_Item = guest_items;
            return View(guest);
        }

        /// <summary>
        /// Load view chi tiết ITT phê duyệt
        /// </summary>
        /// <returns></returns>
        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        public ActionResult ITTApprove()
        {
            return View();
        }

        /// <summary>
        /// Thực thi ITT phê duyệt
        /// </summary>
        /// <param name="id"></param>
        /// <param name="itemId"></param>
        /// <param name="remark"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        [HttpPost]
        public ActionResult ITTApprove(int id, int itemId, string remark, int status)
        {
            var guest = dbContext.Guests.Find(id);

            var guestItems = dbContext.Guest_Item.Find(itemId);
            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            guestItems.ITT = user.EmpCode + "|" + user.FullName;
            guestItems.ITT_Date = DateTime.Now;
            guestItems.ITT_Remark = remark;
            guestItems.ITT_Status = status;

            var gStatus = false;
            foreach (var item in dbContext.Guest_Item.Where(t => t.CatID == id))
            {
                if (item.FST_Status != null && item.FST_Status.Value == 1)
                {
                    gStatus = true;
                }
                else
                {
                    gStatus = false;
                    break;
                }
            }
            guest.Status = gStatus;

            dbContext.SaveChanges();
            return Content(JsonConvert.SerializeObject(guestItems), "application/json");
        }

        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        //FST
        public ActionResult FSTApproveDetail(int id)
        {
            var guest = dbContext.Guests.Find(id);
            var guestItems = dbContext.Guest_Item.Where(t => t.CatID == id && t.AssetType == 2).OrderByDescending(t => t.CreatedDate).ToList();

            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            var tName = dbContext.Users.Include(t => t.Team).First(u => u.ID == user.ID).Team.Name;


            var isAdmin = (HttpContext.User as CustomPrincipal).PriorityRole >= 4;

            if (!isAdmin && tName != "FST")
            {
                guestItems.Clear();
            }

            guest.Guest_Item = guestItems;
            return View(guest);
        }

        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        public ActionResult FSTApprove()
        {
            return View();
        }

        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        [HttpPost]
        public ActionResult FSTApprove(int id, int itemId, string remark, int status)
        {
            var guest = dbContext.Guests.Find(id);

            var guestItems = dbContext.Guest_Item.Find(itemId);
            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            guestItems.FST = user.EmpCode + "|" + user.FullName;
            guestItems.FST_Date = DateTime.Now;
            guestItems.FST_Remark = remark;
            guestItems.FST_Status = status;

            var gStatus = false;
            foreach (var item in dbContext.Guest_Item.Where(t => t.CatID == id))
            {
                if ((item.ITT_Status != null && item.ITT_Status.Value == 1) || (item.SMT_Status != null && item.SMT_Status.Value == 1))
                {
                    gStatus = true;
                }
                else
                {
                    gStatus = false;
                    break;
                }
            }
            guest.Status = gStatus;

            dbContext.SaveChanges();
            return Content(JsonConvert.SerializeObject(guestItems), "application/json");
        }

        /// <summary>
        /// In xác nhận gặp mặt khách
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult GuestReport(int id)
        {
            var guest = dbContext.Guests.Find(id);
            var guestItems = dbContext.Guest_Item.Where(t => t.CatID == id).ToList();
            guest.Guest_Item = guestItems;
            return View(guest);
        }

        /// <summary>
        /// Dowload file đính kèm
        /// </summary>
        /// <param name="filename"></param>
        /// <returns></returns>
        public ActionResult GuestFileDownload(string filename)
        {
            var file = Server.MapPath("~/Files/") + filename;
            return File(file, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", filename);
        }

        /// <summary>
        /// Dowload template đăng ký khách
        /// </summary>
        /// <returns></returns>
        public ActionResult TemplateGuest()
        {
            var file = Server.MapPath("~/Files/Form excel mẫu cho khách.xlsx");
            return File(file, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "File mẫu.xlsx");

        }
    }
}



---------------------------------------------------------------------Go_Out_Controller


using Newtonsoft.Json;
using SMS.Models.DAO;
using SMS.Models.EF;
using SMS.Web.Common;
using SMS.Web.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Web.Mvc;

namespace SMS.Web.Controllers
{
    public class GoOutController : BaseController
    {
        private SMSDbContext _dbContext;

        public GoOutController()
        {
            _dbContext = new SMSDbContext();
        }

        /// <summary>
        /// Hàm show dữ liệu sử dụng ajax
        /// </summary>
        /// <param name="searchString"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public ActionResult History()
        {
            return View();
        }

        [AuthorizeUser(AccessLevel = 2)]
        [HttpGet]
        public ActionResult Cancel(int id)
        {
            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            var goout = _dbContext.Go_Out.FirstOrDefault(t => t.ID == id);
            goout.Cancel = true;
            goout.ApprovedStatus = 4;
            goout.ModifiedBy = user.EmpCode + "|" + user.FullName;
            goout.ModifiedDate = DateTime.Now;
            _dbContext.SaveChanges();

            return Content("Success");
        }

        [HttpPost]
        public ActionResult FetchGoOutData()
        {
            var currentRole = (HttpContext.User as CustomPrincipal).PriorityRole;

            var items = _dbContext.Go_Out_Items.ToList();

            var user = (UserLogin)Session[CommonConstants.USER_SESSION];

            var tName = _dbContext.Users.Include(t => t.Team).First(u => u.ID == user.ID).Team.Name;

            var model = _dbContext.Go_Out.Where(b => currentRole >= 4 || b.Team == tName).OrderByDescending(x => x.EstimatedDateOut).ToList();

            return Json(new { data = model, items, currentRole, recordsTotal = _dbContext.Go_Out.Count(), recordsFiltered = model.Count() });
        }

        /// <summary>
        /// Show danh sách phê duyệt cho TM, ITT, FST
        /// </summary>
        /// <param name="name"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="team"></param>
        /// <param name="empcode"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult FetchGoOutApproveData(string name, int? from, int? to, string team = "", string empcode = "")
        {
            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            var tName = _dbContext.Users.Include(t => t.Team).First(u => u.ID == user.ID).Team.Name;
            var res = new List<Go_Out>();

            var isAdmin = (HttpContext.User as CustomPrincipal).PriorityRole >= 4;

            if (name == "itt")
            {
                res = _dbContext.Go_Out
                .Where(go => _dbContext.Go_Out_Items.Any(i => i.CatID == go.ID && i.AssetType == 1 && i.ITT_Status == null))
                .OrderByDescending(x => x.EstimatedDateOut)
                .ToList();
            }
            else if (name == "fst")
            {
                res = _dbContext.Go_Out
                .Where(go => _dbContext.Go_Out_Items.Any(i => i.CatID == go.ID && i.AssetType == 2 && i.FST_Status == null))
                .OrderByDescending(x => x.EstimatedDateOut)
                .ToList();
            }
            else
            {
                res = _dbContext.Go_Out.Where(go => go.ApprovedStatus == null && (isAdmin || tName == go.Team)).OrderByDescending(x => x.EstimatedDateOut).ToList();
            }

            var recordNumber = _dbContext.Go_Out.Count();

            //filter theo tiêu chí
            if (from != null)
            {
                res = res.Where(t => ((DateTimeOffset)t.CreatedDate.Value).ToUnixTimeSeconds() >= from).ToList();
            }

            if (to != null)
            {
                res = res.Where(t => ((DateTimeOffset)t.CreatedDate.Value).ToUnixTimeSeconds() <= to).ToList();
            }

            if (!string.IsNullOrEmpty(team))
            {
                res = res.Where(t => t.Team.Contains(team)).ToList();
            }

            if (!string.IsNullOrEmpty(empcode))
            {
                res = res.Where(t => t.EmpCode.Contains(empcode)).ToList();
            }

            if (name == "itt" && !isAdmin && tName != "SMT")
            {
                res.Clear();
            }

            if (name == "fst" && !isAdmin && tName != "FST")
            {
                res.Clear();
            }

            return Json(new { data = res, recordsTotal = _dbContext.Go_Out.Count(), recordsFiltered = recordNumber });
        }

        public ActionResult Detail(int id)
        {
            var GoOut = _dbContext.Go_Out.Find(id);
            var GoOutItems = _dbContext.Go_Out_Items.Where(t => t.CatID == id).ToList();
            GoOut.Go_Out_Items = GoOutItems;
            return View(GoOut);
        }

        /// <summary>
        /// Phương thức load view form tạo mới
        /// </summary>
        /// <returns></returns>
        /// 
        [AuthorizeUser(AccessLevel = 2)]
        [HttpGet]
        public ActionResult Create()
        {
            return View();
        }

        [AuthorizeUser(AccessLevel = 2)]
        [HttpPost]
        public ActionResult Create(Go_Out model)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return Content("Bạn cần nhập đầy đủ thông tin");
                }

                model.CreatedDate = DateTime.Now;
                var user = (UserLogin)Session[CommonConstants.USER_SESSION];
                model.CreatedBy = user.EmpCode + "|" + user.FullName;

                ////file
                //if (Request.Files.Count > 0)
                //{
                //    var file = Request.Files.Get("file");
                //    var fileName = Path.GetFileName(file.FileName);
                //    model.AttachedFile = fileName;

                //    if (!Directory.Exists(Server.MapPath("~/Files")))
                //    {
                //        Directory.CreateDirectory(Server.MapPath("~/Files"));
                //    }
                //    var filePath = Server.MapPath("~/Files/" + fileName);
                //    file.SaveAs(filePath);
                //}


                var GoOut = _dbContext.Go_Out.Add(model);
                _dbContext.SaveChanges();
                return Content("Success");
            }
            catch (Exception ex)
            {
                return Content("Lỗi trong quá trình xử lý");
            }
        }

        /// <summary>
        /// Phương thức load view sửa
        /// </summary>
        /// <returns></returns>
        /// 
        [AuthorizeUser(AccessLevel = 2)]
        public ActionResult Edit(int id)
        {
            var GoOut = _dbContext.Go_Out.Find(id);
            var GoOutItems = _dbContext.Go_Out_Items.Where(t => t.CatID == id).ToList();
            GoOut.Go_Out_Items = GoOutItems;
            return View(GoOut);
        }

        /// <summary>
        /// Phương thức sửa cho PIC
        /// </summary>
        /// <param name="go_Out"></param>
        /// <returns></returns>
        /// 
        [AuthorizeUser(AccessLevel = 2)]
        [HttpPost]
        public ActionResult Edit(Go_Out model)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return Content("Dữ liệu nhập vào không đúng");
                }

                //var filePath = "";
                ////file
                //if (Request.Files.Count > 0)
                //{
                //    var file = Request.Files.Get("file");
                //    var fileName = Path.GetFileName(file.FileName);
                //    model.AttachedFile = fileName;

                //    if (!Directory.Exists(Server.MapPath("~/Files")))
                //    {
                //        Directory.CreateDirectory(Server.MapPath("~/Files"));
                //    }
                //    filePath = Server.MapPath("~/Files/" + fileName);
                //    file.SaveAs(filePath);

                //}

                var user = (UserLogin)Session[CommonConstants.USER_SESSION];

                var GoOut = _dbContext.Go_Out.FirstOrDefault(t => t.ID == model.ID);
                GoOut.ModifiedBy = user.EmpCode + "|" + user.FullName;
                GoOut.ModifiedDate = DateTime.Now;
                GoOut.Reason = model.Reason;
                GoOut.Shift = model.Shift;
                GoOut.Purpose = model.Purpose;
                GoOut.EstimatedDateOut = model.EstimatedDateOut;
                GoOut.EstimatedTimeOut = model.EstimatedTimeOut;
                GoOut.EstimatedDateReturn = model.EstimatedDateReturn;
                GoOut.EstimatedTimeReturn = model.EstimatedTimeReturn;
                //if (filePath != "")
                //{
                //    GoOut.AttachedFile = model.AttachedFile;
                //}

                var listItemIDs = new List<int>();
                if (model.Go_Out_Items != null)
                {
                    foreach (var item in model.Go_Out_Items)
                    {
                        if (item.ID == 0)
                        {
                            _dbContext.Go_Out_Items.Add(item);
                        }
                        else
                        {
                            listItemIDs.Add(item.ID);
                            var bringItem = _dbContext.Go_Out_Items.FirstOrDefault(t => t.ID == item.ID);
                            bringItem.Item = item.Item;
                            bringItem.Serial = item.Serial;
                            bringItem.Quantity = item.Quantity;
                            bringItem.Unit = item.Unit;
                            bringItem.AssetType = item.AssetType;
                            bringItem.IsReturn = item.IsReturn;
                            bringItem.ReturnDate = item.ReturnDate;
                            bringItem.ReturnTime = item.ReturnTime;
                            bringItem.ModifiedBy = user.EmpCode;
                            bringItem.ModifiedDate = DateTime.Now;
                        }
                    }
                }
                var itemsDelete = _dbContext.Go_Out_Items.Where(t => !listItemIDs.Contains(t.ID) && t.CatID == GoOut.ID);
                _dbContext.Go_Out_Items.RemoveRange(itemsDelete);

                _dbContext.SaveChanges();

                return Content("Success");
            }
            catch (System.Exception ex)
            {
                return Content("Lỗi trong quá trình xử lý");
            }
        }

        [AuthorizeUser(AccessLevel = 2)]
        [HttpGet]
        public ActionResult Delete(int id)
        {
            var GoOutItems = _dbContext.Go_Out_Items.Where(t => t.CatID == id).ToList();
            _dbContext.Go_Out_Items.RemoveRange(GoOutItems);

            var GoOut = _dbContext.Go_Out.FirstOrDefault(t => t.ID == id);
            _dbContext.Go_Out.Remove(GoOut);

            _dbContext.SaveChanges();

            return Content("Success");
        }

        [AuthorizeUser(AccessLevel = 3)]
        public ActionResult ApproveDetail(int id)
        {
            var GoOut = _dbContext.Go_Out.Find(id);
            var GoOutItems = _dbContext.Go_Out_Items.Where(t => t.CatID == id).OrderByDescending(t => t.CreatedDate).ToList();
            GoOut.Go_Out_Items = GoOutItems;
            return View(GoOut);
        }

        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        public ActionResult Approve()
        {
            return View();
        }

        [AuthorizeUser(AccessLevel = 3)]
        [HttpPost]
        public ActionResult ApproveEmp(int id, string remark, int status)
        {
            var GoOut = _dbContext.Go_Out.Find(id);

            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            GoOut.ApprovedBy = user.EmpCode + "|" + user.FullName;
            GoOut.ApprovedDate = DateTime.Now;
            GoOut.ApproverRemark = remark;
            GoOut.ApprovedStatus = status;

            _dbContext.SaveChanges();
            return Content(JsonConvert.SerializeObject(GoOut), "application/json");
        }

        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        [HttpPost]
        public ActionResult Approve(int id, int itemId, string remark, int status)
        {
            var GoOut = _dbContext.Go_Out.Find(id);

            var GoOutItems = _dbContext.Go_Out_Items.Find(itemId);
            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            GoOutItems.ApprovedBy = user.EmpCode + "|" + user.FullName;
            GoOutItems.ApprovedDate = DateTime.Now;
            GoOutItems.ApproverRemark = remark;
            GoOutItems.ApprovedStatus = status;

            _dbContext.SaveChanges();
            return Content(JsonConvert.SerializeObject(GoOutItems), "application/json");
        }

        [AuthorizeUser(AccessLevel = 3)]
        //ITT
        public ActionResult ITTApproveDetail(int id)
        {
            var GoOut = _dbContext.Go_Out.Find(id);
            var GoOutItems = _dbContext.Go_Out_Items.Where(t => t.CatID == id && t.AssetType == 1).OrderByDescending(t => t.CreatedDate).ToList();
            GoOut.Go_Out_Items = GoOutItems;
            return View(GoOut);
        }

        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        public ActionResult ITTApprove()
        {
            return View();
        }

        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        [HttpPost]
        public ActionResult ITTApprove(int id, int itemId, string remark, int status)
        {
            var GoOut = _dbContext.Go_Out.Find(id);

            var GoOutItems = _dbContext.Go_Out_Items.Find(itemId);
            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            GoOutItems.ITT = user.EmpCode + "|" + user.FullName;
            GoOutItems.ITT_Date = DateTime.Now;
            GoOutItems.ITT_Remark = remark;
            GoOutItems.ITT_Status = status;

            _dbContext.SaveChanges();
            return Content(JsonConvert.SerializeObject(GoOutItems), "application/json");
        }

        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        //FST
        public ActionResult FSTApproveDetail(int id)
        {
            var GoOut = _dbContext.Go_Out.Find(id);
            var GoOutItems = _dbContext.Go_Out_Items.Where(t => t.CatID == id && t.AssetType == 2).OrderByDescending(t => t.ID).ToList();
            GoOut.Go_Out_Items = GoOutItems;
            return View(GoOut);
        }

        [AuthorizeUser(AccessLevel = 3)]
        public ActionResult FSTApprove()
        {
            return View();
        }

        [AuthorizeUser(AccessLevel = 3, ExceptRoleName = "FM")]
        [HttpPost]
        public ActionResult FSTApprove(int id, int itemId, string remark, int status)
        {
            var GoOut = _dbContext.Go_Out.Find(id);

            var GoOutItems = _dbContext.Go_Out_Items.Find(itemId);
            var user = (UserLogin)Session[CommonConstants.USER_SESSION];
            GoOutItems.FST = user.EmpCode + "|" + user.FullName;
            GoOutItems.FST_Date = DateTime.Now;
            GoOutItems.FST_Remark = remark;
            GoOutItems.FST_Status = status;

            _dbContext.SaveChanges();
            return Content(JsonConvert.SerializeObject(GoOutItems), "application/json");
        }

        public ActionResult GOReport(int id)
        {
            var goout = _dbContext.Go_Out.Find(id);
            var gooutItems = _dbContext.Go_Out_Items.Where(t => t.CatID == id).ToList();
            goout.Go_Out_Items = gooutItems;
            return View(goout);
        }
    }
}
